apiVersion: v1
kind: Namespace
metadata:
  name: golden-age
---
# local secret
apiVersion: v1
kind: Secret
metadata:
  name: flask-secret
  namespace: golden-age
type: Opaque
data:
  POSTGRES_USER: cG9zdGdyZXM= # postgres
  POSTGRES_PASSWORD: cGFzc3dvcmQ= # password
  POSTGRES_DB: ZGF0YWJhc2U= # database
---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: golden-age
spec:
  ports:
    - port: 6379
  selector:
    app: redis
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-api
  namespace: golden-age
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      namespace: golden-age
      labels:
        app: redis
    spec:
      containers:
        - name: redis-api
          image: redis:7.0
          ports:
            - containerPort: 6379
#          resources:
#            requests:
#              cpu: "500m"
#              memory: "5Gi"
#            limits:
#              cpu: "1"
#              memory: "10Gi"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flaskapi-deployment
  namespace: golden-age
  labels:
    app: flaskapi
spec:
  replicas: 1
  selector:
    matchLabels:
      app: flaskapi
  template:
    metadata:
      namespace: golden-age
      labels:
        app: flaskapi
    spec:
      containers:
        - name: flaskapi
          image: grabot/age_of_gold:1.40
          imagePullPolicy: Always
          ports:
            - containerPort: 5000
#          resources:
#            requests:
#              cpu: "250m"
#              memory: "500Mi"
#            limits:
#              cpu: "500m"
#              memory: "1Gi"
          volumeMounts:
            - name: hostvol
              mountPath: /app/static/uploads
          envFrom:
            - secretRef:
                name: flask-secret
          env:
            - name: POSTGRES_URL
              value: service-postgres.golden-age.svc.cluster.local
            - name: POSTGRES_PORT
              value: "5432"
            - name: REDIS_URL
              value: redis-service.golden-age.svc.cluster.local
            - name: REDIS_PORT
              value: "6379"
      volumes:
        - name: hostvol
          hostPath:
            path: /data/avatars
---
apiVersion: v1
kind: Service
metadata:
  namespace: golden-age
  name: flask-service
spec:
  ports:
  - port: 5000
    protocol: TCP
    targetPort: 5000
  selector:
    app: flaskapi
  type: LoadBalancer
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: postgres-db-claim
  namespace: golden-age
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 150Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: golden-age
  name: deployment-postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: database
  template:
    metadata:
      namespace: golden-age
      labels:
        app: database
    spec:
      terminationGracePeriodSeconds: 180
      containers:
        - name: postgres
          image: postgres:14.7
          ports:
            - name: tcp-5432
              containerPort: 5432
          envFrom:
            - secretRef:
                name: flask-secret
          env:
            - name: POSTGRES_PORT
              value: "5432"
          args:
          - -c
          - max_connections=4000
          - -c
          - max_parallel_workers=32
          - -c
          - max_parallel_workers_per_gather=8
          - -c
          - shared_buffers=10240MB
          volumeMounts:
            - name: data-storage-volume
              mountPath: /var/lib/postgresql/data
#          resources:
#            requests:
#              cpu: "500m"
#              memory: "5Gi"
#            limits:
#              cpu: "1"
#              memory: "10Gi"
      volumes:
        - name: data-storage-volume
          persistentVolumeClaim:
            claimName: postgres-db-claim
---
apiVersion: v1
kind: Service
metadata:
  name: service-postgres
  namespace: golden-age
  labels:
    name: postgres
spec:
  ports:
    - port: 5432
  selector:
    app: database